import axios from "axios";
import { format, parse } from "date-fns";
import { GetServerSideProps, GetStaticProps, NextPage } from "next";
import dynamic from "next/dynamic";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { dataBaseData, HomePageProps, ServiceTypes } from "../types";

const HomePage = ({ eventsList = [] }: HomePageProps) => {
	const Calendar = dynamic(() => import("react-calendar"), {
		ssr: false,
	});
	const [events, setEvents] = useState(eventsList);

	// useEffect(() => {
	// 	const result = eventsList.map((item: dataBaseData) => {
	// 		if (item.service_date) {
	// 			return { ...item, service_date: parse(item.service_date, "yyyy-MM-dd", new Date()) };
	// 		}
	// 		return item;
	// 	});
	// 	setEvents(eventsList);
	// }, [eventsList]);

	const [value, onChange] = useState(new Date());

	const setClass = (date: Date) => {
		const dateHasEvent = events.find((x) => {
			return (
				x.service_date &&
				date.getDay() === new Date(x.service_date).getDay() &&
				date.getMonth() === new Date(x.service_date).getMonth() &&
				date.getDate() === new Date(x.service_date).getDate()
			);
		});
		if (!dateHasEvent || !dateHasEvent.service_type) {
			return "";
		}
		return serviceTypeColor(dateHasEvent.service_type as ServiceTypes);
	};

	// const dateEqualityCheck = (date: string) => {
	// 	return value.toLocaleDateString() === new Date(date).toLocaleDateString();
	// };

	const serviceTypeColor = (serviceType: ServiceTypes | string | null) => {
		switch (serviceType) {
			case ServiceTypes.BIRTHDAY:
				return "!bg-green-500";
			case ServiceTypes.CEIL:
				return "!bg-pink-500";
			case ServiceTypes.CONFERENCE:
				return "!bg-blue-500";
			case ServiceTypes.MARRIAGE:
				return "!bg-yellow-500";

			default:
				return "";
		}
	};
	return (
		<div>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className="p-10 flex flex-col gap-4 justify-center items-center">
				<Calendar
					className="w-96 h-full rounded-xl shadow-xl "
					tileClassName={({ date }) => setClass(date)}
					value={value}
					onChange={onChange}
				/>

				<div className="flex flex-wrap justify-center gap-2 items-center">
					{events?.map(
						(eventItem, index) =>
							eventItem.service_date && (
								<Link href={`/${eventItem.id}`} key={index}>
									<a
										className={` ${
											format(value, "yyyy-MM-dd") === eventItem.service_date
												? ""
												: "hidden"
										}`}
									>
										<div
											className={`grid grid-cols-1 divide-y text-white gap-2 rounded-lg shadow-xl border p-4 ${serviceTypeColor(
												eventItem.service_type
											)}`}
										>
											<div className="text-center">{eventItem.service_type}</div>
											<div className="text-center">
												{isNaN(Number(eventItem.service_time))
													? eventItem.service_time
													: `${eventItem.service_time}:00 ŸÖ`}
											</div>
											<div className="text-center">{`${eventItem.event_status}`}</div>
										</div>
									</a>
								</Link>
							)
					)}
				</div>
				<Link href={"/0"}>
					<a className="flex shadow-xl justify-center items-center w-1/2 rounded-xl bg-yellow-500 p-4 text-white">
						ÿßÿ∂ŸÅ ÿ≠ÿ¨ÿ≤ ÿ¨ÿØŸäÿØ
					</a>
				</Link>
				{/* <pre>{JSON.stringify(eventsList, null, 2)}</pre> */}
			</div>
		</div>
	);
};

export const getStaticProps: GetStaticProps = async () => {
	try {
		const {
			data: { data },
		} = await axios({
			method: "GET",
			url: "http://localhost:3000/api/events",
		});

		return {
			props: { eventsList: data },
		};
	} catch (error) {
		// check if the error was thrown from axios
		if (axios.isAxiosError(error)) {
			if (error.response) {
				// The request was made and the server responded with a status code
				// that falls out of the range of 2xx
				console.log(
					"üöÄ ~ file: index.tsx ~ line 37 ~ constgetStaticProps:GetStaticProps= ~ error.response",
					error.response.data
				);
				console.log(
					"üöÄ ~ file: index.tsx ~ line 38 ~ constgetStaticProps:GetStaticProps= ~ error.response",
					error.response.status
				);
				console.log(
					"üöÄ ~ file: index.tsx ~ line 39 ~ constgetStaticProps:GetStaticProps= ~ error.response",
					error.response.headers
				);
			} else if (error.request) {
				// The request was made but no response was received
				// `error.request` is an instance of XMLHttpRequest in the
				// browser and an instance of
				// http.ClientRequest in node.js
				console.log(
					"üöÄ ~ file: index.tsx ~ line 45 ~ constgetStaticProps:GetStaticProps= ~ error.request",
					error.request
				);
			}
			throw error;
		}
		// check if instance of error not throw string but => throw new Error("")
		if (error instanceof Error) {
			throw error;
		}

		// error is string
		throw new Error(error as string);
	}
};

export default HomePage;
